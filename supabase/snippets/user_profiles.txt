-- Drop the table and functions
DROP TABLE IF EXISTS profiles;
DROP trigger if exists on_auth_user_created on auth.users;


-- Create a table for public profiles
create table profiles (
  id uuid references auth.users on delete cascade not null primary key,
  name text,
  email text unique,
  constraint name_length check (char_length(name) >= 3)
);

-- Set up Row Level Security (RLS)
alter table profiles
  enable row level security;

-- Policies
create  policy "Public profiles are viewable by authenticated users." on profiles
  for select using (true); -- auth.uid() is not null

create policy "Users can insert their own profile." on profiles
  for insert with check (auth.uid() = id);

create policy "Users can update own profile." on profiles
  for update using (auth.uid() = id);

-- Trigger function to create a profile when a new user signs up
create or replace function public.handle_new_user()
returns trigger
as $$
begin
  insert into public.profiles (id, name, email)
  values (new.id, new.raw_user_meta_data->>'name', new.email);
  return new;
end;
$$ language plpgsql security definer;

-- Trigger to call the function after a new user is created
create or replace trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();